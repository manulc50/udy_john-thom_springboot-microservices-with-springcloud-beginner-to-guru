<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.1.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>guru.springframework</groupId>
	<artifactId>mssc-brewery-bom</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<description>Brewery BOM Project - common deps for brewery services</description>

	<licenses>
		<license>
			<name>GNU General Public License v3.0</name>
			<url>https://www.gnu.org/licenses/gpl.txt</url>
		</license>
	</licenses>

	<organization>
		<name>Spring Framework Guru</name>
	</organization>

	<developers>
		<developer>
			<name>Manuel Lorenzo</name>
			<organization>Spring Framework Guru</organization>
		</developer>
	</developers>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>11</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<mapstruct.version>1.3.0.Final</mapstruct.version>
		<awaitility.version>3.1.6</awaitility.version>
		<logstash.logback.version>6.3</logstash.logback.version>
		<spring-cloud.version>Hoxton.SR7</spring-cloud.version>
		<!--set this to your docker acct name-->
        <docker.image.prefix>sfgbeerworks</docker.image.prefix>
        <!--Set to name of project-->
        <docker.image.name>${project.artifactId}</docker.image.name>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${mapstruct.version}</version>
			</dependency>
			<dependency>
				<groupId>org.awaitility</groupId>
				<artifactId>awaitility</artifactId>
				<version>${awaitility.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-artemis</artifactId>
		</dependency>
		 <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
			<groupId>org.springframework.statemachine</groupId>
			<artifactId>spring-statemachine-core</artifactId>
			<version>2.1.2.RELEASE</version>
		</dependency>
        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Dependencia para codificar las trazas de logging en objetos JSON y mostrarlos en este formato por consola -->
		<!-- Esto es útil e importante para poder enviar posteriormente los logs a sistemas de logging consolidados como, por ejemplo, el stack ELK -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>${logstash.logback.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<!-- Esta dependencia también incluye la dependencia con Spring Cloud Sleuth -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- De cara al despliegue de esta aplicación o servicio en Docker, la manera más óptima(las imágenes de Docker ocupan mucho menos espacio, entre otras cosas) de hacerlo es empaquetando la aplicación en un JAR por capas para que cada capa se cree en una capa diferente de la imagen de Docker -->
				<!-- Para ello, añadimos esta configuración para habilitar la generación de JARs por capas y la inclusión de la herramienta "Layer Tools" para poder extraer esas capas de los JARs  -->
				<configuration>
                    <layers>
                        <enabled>true</enabled>
                        <includeLayerTools>true</includeLayerTools>
                    </layers>
                </configuration>
			</plugin>
			<!-- Este plugin hace que se haga un "mvn clean" automáticamente en la fase de inicio de la construcción de cada proyecto que use este BOM -->
			<!-- Es decir, con este plugin no hace falta hacer "mvn clean compile", "mvn clean install" o "mvn clean package" cada vez que queramos compilar, instalar o empaquetar el proyecto, sino que con hacer directamente
			     "mvn compile", "mvn install" o "mvn package", estás acciones ya ejecutan directamente "mvn clean" de forma automática -->
			<plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <executions>
                    <execution>
                        <id>auto-clean</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin para que el compilador de Maven tenga en cuenta las anotaciones de MapStruct -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<!-- Cuando se usa Lombok junto con MapStruct en el proyecto, hay que incluir este "path" para que trabajen juntos -->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<!-- Esta versión se obtiene de la versión de Spring Boot usada en este proyecto que es el Parent Pom -->
							<version>${lombok.version}</version> 
						 </path>
					</annotationProcessorPaths>
					<compilerArgs>
						<compilerArg>-Amapstruct.defaultComponentModel=spring</compilerArg>
					</compilerArgs>
				</configuration>
			</plugin>
			<!-- Plugin para obligar a seguir unas reglas. Si no se cumplen, las construcciones fallarán -->
			 <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                            	<!-- Debe tener instalada una versión de Maven igual o mayor a 3.6.0 -->
                                <requireMavenVersion>
                                    <version>[3.6.0,)</version>
                                </requireMavenVersion>
                                <!-- Debe usar la versión 11 de Java -->
                                <requireJavaVersion>
                                    <version>11</version>
                                </requireJavaVersion>
                                <!-- Las construcciones de "releases" no deben tener dependencias "snapshot"(no definitivas o no finales) -->
                                <requireReleaseDeps>
                                    <onlyWhenRelease>true</onlyWhenRelease>
                                    <message>Release builds must not have on snapshot dependencies</message>
                                </requireReleaseDeps>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			<!-- Plugin para construir imágenes Docker a partir de un Dockerfile -->
			<!-- El lugar por defecto donde va a localizar el Dockerfile es dentro de la carpeta "/src/main/docker" -->
			<!-- Para ello, hay que ejecutar el comando de maven "mvn docker:build" después de empaquetar la aplicación con el comando de maven "mvn package" -->
            <!-- El comando de maven "mvn docker:push" es para subir las imágenes creada a nuestro repositorio remoto de imágenes de DockerHub -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.33.0</version>
                <configuration>
                    <verbose>true</verbose>
                    <images>
                        <image>
                            <name>${docker.image.prefix}/${docker.image.name}</name>
                            <alias>${project.artifactId}</alias>
                            <build>
                                <!--copies artifact to docker build dir in target-->
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <dockerFile>Dockerfile</dockerFile>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
		</plugins>
	</build>

</project>