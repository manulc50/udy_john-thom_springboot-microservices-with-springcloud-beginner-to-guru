<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>guru.sfg.brewery</groupId>
	<artifactId>mssc-config-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>mssc-config-server</name>
	<description>Brewery Config Server</description>

	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR7</spring-cloud.version>
		<!--set this to your docker acct name-->
		<docker.image.prefix>sfgbeerworks</docker.image.prefix>
		<!--Set to name of project-->
		<docker.image.name>${project.artifactId}</docker.image.name>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- Dependencia para codificar las trazas de logging en objetos JSON y mostrarlos en este formato por consola -->
		<!-- Esto es útil e importante para poder enviar posteriormente los logs a sistemas de logging consolidados como, por ejemplo, el stack ELK -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>6.3</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- De cara al despliegue de esta aplicación o servicio en Docker, la manera más óptima(las imágenes de Docker ocupan mucho menos espacio, entre otras cosas) de hacerlo es empaquetando la aplicación en un JAR por capas para que cada capa se cree en una capa diferente de la imagen de Docker -->
				<!-- Para ello, añadimos esta configuración para habilitar la generación de JARs por capas y la inclusión de la herramienta "Layer Tools" para poder extraer esas capas de los JARs  -->
				<configuration>
                    <layers>
                        <enabled>true</enabled>
                        <includeLayerTools>true</includeLayerTools>
                    </layers>
                </configuration>
			</plugin>
			<!-- Plugin para construir imágenes Docker a partir de un Dockerfile -->
			<!-- El lugar por defecto donde va a localizar el Dockerfile es dentro de la carpeta "/src/main/docker" -->
			<!-- Para ello, hay que ejecutar el comando de maven "mvn docker:build" después de empaquetar la aplicación con el comando de maven "mvn package" -->
            <!-- El comando de maven "mvn docker:push" es para subir las imágenes creada a nuestro repositorio remoto de imágenes de DockerHub -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.33.0</version>
                <configuration>
                    <verbose>true</verbose>
                    <images>
                        <image>
                            <name>${docker.image.prefix}/${docker.image.name}</name>
                            <alias>${project.artifactId}</alias>
                            <build>
                                <!--copies artifact to docker build dir in target-->
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <dockerFile>Dockerfile</dockerFile>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
		</plugins>
	</build>

</project>
